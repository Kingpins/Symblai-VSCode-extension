{
    "Symbl.ai Get Access Token snippet": {
        "prefix": [
            "?get_token",
            "?access_token"
        ],
        "description": "This snippet should be used first(mandatorily), to get access_token for the rest of the API calls.",
        "body": [
            "import requests",
            "import datetime",
            "import json",
            "",
            "",
            "responses = {",
            "    400: 'Bad Request! Please refer docs for correct input fields.',",
            "    401: 'Unauthorized. Please generate a new access token.',",
            "    404: 'The conversation and/or its metadata you asked could not be found, please check the input provided',",
            "    429: 'Maximum number of concurrent jobs reached. Please wait for some requests to complete.',",
            "    500: 'Something went wrong! Please contact support@symbl.ai'",
            "}",
            "",
            "expiry_in = None",
            "access_tok = None",
            "def get_access_token():",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/developer-tools/authentication",
            "",
            "   global expiry_in",
            "   global access_tok",
            "   APP_ID = \"${1:APP_ID}\"",
            "   APP_SECRET = \"${2:APP_SECRET_KEY}\"",
            "   if expiry_in and int(datetime.datetime.now().timestamp()) < expiry_in:",
            "        return access_tok",
            "   url = \"https://api.symbl.ai/oauth2/token:generate\"",
            "   appId = APP_ID",
            "   appSecret = APP_SECRET",
            "   payload = {",
            "       \"type\": \"application\",",
            "       \"appId\": appId,",
            "       \"appSecret\": appSecret",
            "   }",
            "   headers = {",
            "       'Content-Type': 'application/json'",
            "   }",
            "   response = requests.request(\"POST\", url, headers=headers, data=json.dumps(payload))",
            "   if response.status_code == 200:",
            "       expiry_in = int(datetime.datetime.now().timestamp() + response.json()['expiresIn']/2)",
            "       access_tok = response.json()['accessToken']",
            "       return access_tok",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai Job Status snippet": {
        "prefix": "?job_status",
        "description": "Check job_status for respective job_id",
        "body": [
            "def job_status(job_id):",
            "   url = f\"https://api.symbl.ai/v1/job/{job_id}\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "   }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       return response.json() # Response will give you ID of the job and current status of the job",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai POST AUDIO API snippet": {
        "prefix": [
            "?audio_api",
            "?post_audio"
        ],
        "description": "The Async POST Audio API allows you to process an audio file, Use this API to upload your raw audio file and generate a Conversation ID",
        "body": [
            "def post_audio_api(audio_file, diarization=None, detect_phrases=False):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-audio",
            "",
            "   if diarization:",
            "       url = f\"https://api.symbl.ai/v1/process/audio/?enableSpeakerDiarization=true&diarizationSpeakerCount={diarization}\"",
            "   else:",
            "       url = \"https://api.symbl.ai/v1/process/audio/\"",
            "   payload = None",
            "   numberOfBytes = 0",
            "   try:",
            "       # audio_file = open('destination/of/file/file.wav', 'rb')  # use (r\"path/to/file\") when using windows path",
            "       payload = audio_file.read()",
            "       numberOfBytes = len(payload)",
            "   except FileNotFoundError:",
            "       print(\"Could not read the file provided.\")",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(), # set your access token here. See https://docs.symbl.ai/docs/developer-tools/authentication",
            "       'Content-Length': str(numberOfBytes), # This should correctly indicate the length of the request body in bytes.",
            "   }",
            "   params = {",
            "       'detectPhrases': detect_phrases,",
            "       # <Optional, boolean| detect_phrases> |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.",
            "       'languageCode': \"en-US\"",
            "       # <Optional, boolean| language_code> |code of language of recording.",
            "       # 'name': \"BusinessMeeting\",",
            "       # <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "       # 'webhookUrl': \"https://yourdomain.com/jobs/callback\",",
            "       # <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "       # 'customVocabulary': ['Platform', 'Discussion', 'Targets'],",
            "       # <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "       # 'confidenceThreshold': 0.6,",
            "       # <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "   }",
            "   response = requests.request(\"POST\", url, headers=headers, data=payload, params=json.dumps(params))",
            "   return response.json() # Response will give you conversation_id and job_id",


        ]
    },
    "Symbl.ai POST AUDIO URL API snippet": {
        "prefix": [
            "?audio_url_api",
            "?post_audio_url"
        ],
        "description": "The Async Audio URL API accepts a URL to an audio file of which you want to process, It can be utilized for any use case where you have access to recorded audio stored publicly as URL and want to extract insights and other conversational attributes supported by Symbl's Conversation API.",
        "body": [
            "def post_audio_url_api(audio_url, diarization=None, detect_phrases=False):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-audio-url",
            "",
            "   if diarization:",
            "       url = f\"https://api.symbl.ai/v1/process/audio/?enableSpeakerDiarization=true&diarizationSpeakerCount={diarization}\"",
            "   else:",
            "       url = \"https://api.symbl.ai/v1/process/audio/\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(), # set your access token here. See https://docs.symbl.ai/docs/developer-tools/authentication",
            "       'Content-Type': 'application/json'",
            "   }",
            "   payload = {",
            "       'url': audio_url,",
            "       # A valid url string. The URL must be a publicly accessible url.",
            "       'detectPhrases': detect_phrases,",
            "       # <Optional, boolean| detect_phrases> |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.",
            "       'languageCode': \"en-US\"",
            "       # <Optional, boolean| language_code> |code of language of recording.",
            "       # 'name': \"BusinessMeeting\",",
            "       # <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "       # 'webhookUrl': \"https://yourdomain.com/jobs/callback\",",
            "       # <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "       # 'customVocabulary': ['Platform', 'Discussion', 'Targets'],",
            "       # <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "       # 'confidenceThreshold': 0.6,",
            "       # <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "   }",
            "   response = requests.request(\"POST\", url, headers=headers, data=json.dumps(payload))",
            "   return response.json() # Response will give you conversation_id and job_id",


        ]
    },
    "Symbl.ai POST VIDEO URL API snippet": {
        "prefix": [
            "?video_url_api",
            "?post_video_url"
        ],
        "description": "The Async Video URL API allows you to process a mp4 video and return the full text transcript along with conversational insights.",
        "body": [
            "def post_video_url_api(video_url, diarization=None, detect_phrases=False):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-video-url",
            "",
            "   if diarization:",
            "       url = f\"https://api.symbl.ai/v1/process/video/url?enableSpeakerDiarization=true&diarizationSpeakerCount={diarization}\"",
            "   else:",
            "       url = \"https://api.symbl.ai/v1/process/video/url\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(), # set your access token here. See https://docs.symbl.ai/docs/developer-tools/authentication",
            "       'Content-Type': 'application/json'",
            "   }",
            "   payload = {",
            "       'url': video_url,",
            "       # A valid url string. The URL must be a publicly accessible url.",
            "       'detectPhrases': detect_phrases,",
            "       # <Optional, boolean| detect_phrases> |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.",
            "       'languageCode': \"en-US\"",
            "       # <Optional, boolean| language_code> |code of language of recording.",
            "       # 'name': \"BusinessMeeting\",",
            "       # <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "       # 'webhookUrl': \"https://yourdomain.com/jobs/callback\",",
            "       # <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "       # 'customVocabulary': ['Platform', 'Discussion', 'Targets'],",
            "       # <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "       # 'confidenceThreshold': 0.6,",
            "       # <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "   }",
            "   response = requests.request(\"POST\", url, headers=headers, data=json.dumps(payload))",
            "   return response.json() # Response will give you conversation_id and job_id",
        ]
    },
    "Symbl.ai Conversation Information snippet": {
        "prefix": "?conversation",
        "description": "This API returns the conversation meta-data like meeting name, member name and email, start and end time of the meeting, meeting type and meeting id.",
        "body": [
            "def conversation_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/conversation-data",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "   }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai DELETE Conversation snippet": {
        "prefix": "?delete-conversation",
        "description": "This API permanently deletes conversation and all related entities such as messages, insights, topics etc. associated with the Conversation ID.",
        "body": [
            "def delete_conversation_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/delete-conversation",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "   }",
            "   response = requests.request(\"DELETE\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Transcription API snippet": {
        "prefix": [
            "?transcription",
            "?messages"
        ],
        "description": "The Messages API returns a list of all the messages in a conversation. You can use this for providing Speech to Text data (also known as transcription sometimes) for video conference, meeting or telephone call.",
        "body": [
            "def messages_api(conversation_id,sentiment=False):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/messages",
            "",
            "   if sentiment:",
            "       url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/messages?sentiment=true\"",
            "   else:",
            "       url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/messages\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Topics API snippet": {
        "prefix": "?topics",
        "description": "The most relevant topics of discussion from the conversation that are generated based on the combination of the overall scope of the discussion. This API returns all the topics generated from a conversation.",
        "body": [
            "def topics_api(conversation_id,sentiment=False):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/get-topics",
            "",
            "   if sentiment:",
            "       url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/topics?sentiment=true\"",
            "   else:",
            "       url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/topics\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   params = {",
            "       'parentRefs': True,",
            "   }",
            "   response = requests.request(\"GET\", url, headers=headers,params=json.dumps(params))",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Questions API snippet": {
        "prefix": "?questions",
        "description": "This API help you find explicit question or request for information that comes up during the conversation, whether answered or not, is recognized as a question.",
        "body": [
            "def questions_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/questions",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/questions\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Follow-Ups API snippet": {
        "prefix": "?follow-ups",
        "description": "This API returns list of all the follow-ups generated from the conversation. This is a category of Action Items with a connotation to follow-up a request or a task like sending an email or making a phone call or booking an appointment or setting up a meeting.",
        "body": [
            "def follow_ups_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/follow-ups",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/follow-ups\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Action Items API snippet": {
        "prefix": "?action-items",
        "description": "This API returns a list of all the action items generated from the conversation.",
        "body": [
            "def action_items_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/action-items",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/action-items\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Entities API snippet": {
        "prefix": "?entities",
        "description": "This API provides you with a functionality to extract entities(custom, location, person, date, number, organization,datetime,daterange, etc ) from the conversation.",
        "body": [
            "def entities_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/entities",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/entities\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Analytics API snippet": {
        "prefix": "?analytics",
        "description": "Analytics API provides you with functionality like finding speaker ratio, talk time, silence, pace and overlap in a conversation.",
        "body": [
            "def analytics_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/analytics",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/analytics\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Members API snippet": {
        "prefix": [
            "?members",
            "?speakers"
        ],
        "description": "This API returns a list of all the members in a conversation. A Member is referred to a participant in the conversation that is uniquely identified as a speaker. Identifying different participants in the meetings can be done by implementing speaker separation.",
        "body": [
            "def members_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/members",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/members\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai GET Summary API snippet": {
        "prefix": "?summary",
        "description": "This API allows you to get a Summary of important contextual messages in a conversation.This API works best on audio/video conversations that are at least 10 mins in duration. For text conversations, there must be more than 60 lines of conversation for the Summary to get generated.",
        "body": [
            "def summary_api(conversation_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/summary",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/summary\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   response = requests.request(\"GET\", url, headers=headers)",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
    "Symbl.ai calling APIs snippet": {
        "prefix": [
            "?call-api",
            "?apis"
        ],
        "description": "This code snippet calls all the APIs of the Symbl.ai Conversation Intelligence",
        "body": [
            "def calling_apis():",
            "   # It is recommended to use this function after defining all your APIs",
            "",
            "   # You can use any of the POST API(RAW AUDIO, AUDIO URL, VIDEO URL), We have used AUDIO URL",
            "   response = post_audio_url_api(${1:AUDIO_URL})",
            "   if 'message' in response:",
            "       print(response['message'])",
            "   conversation_id= response['conversationId'],",
            "   job_id= response['jobId'],",
            "   ",
            "   job_stat = job_status(job_id)",
            "   conversation = conversation_api(conversation_id)",
            "   # analytics = analytics_api(conversation_id)",
            "   # members = members_api(conversation_id)",
            "   # messages = messages_api(conversation_id)",
            "   # topics = topics_api(conversation_id)",
            "   # questions = questions_api(conversation_id)",
            "   # summary = summary_api(conversation_id)",
            "   # entities = entities_api(conversation_id)",
            "   # follow_ups = follow_ups_api(conversation_id)",
            "   # action_items = action_items_api(conversation_id)",
            "   return job_stat,conversation # ,analytics,members,messages,topics,questions",
        ]
    },
    "Symbl.ai PUT Members API snippet": {
        "prefix": [
            "?edit-members",
            "?modify-speakers",
            "?put-speakers"
        ],
        "description": "Update an existing member in an conversation. This API can be used for updating the unique speakers detected as members from diarization as well.",
        "body": [
            "def put_members_api(conversation_id,member_id):",
            "   # For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/update-members",
            "",
            "   url = f\"https://api.symbl.ai/v1/conversations/{conversation_id}/members/{member_id}\"",
            "   headers = {",
            "       'Authorization': 'Bearer ' + get_access_token(),",
            "       'Content-Type': 'application/json'",
            "    }",
            "   payload = {",
            "       'id': \"${1:UUID_to_be_updated}\",  # Should be a valid UUID e.g. f170371e-d9db-4d55-9d49-a111a89cf078",
            "       'email': \"${2:email_id_to_be_updated}\",  # Optional, Should be a valid emailId e.g. John@domain.com",
            "       'name': \"${3:name_to_be_updated}\"  # Should be a valid string e.g. John",
            "   }",
            "   response = requests.request(\"PUT\", url, headers=headers, data=json.dumps(payload))",
            "   if response.status_code == 200:",
            "       json_data = response.json()",
            "       return json_data",
            "   else:",
            "       print(responses[response.status_code])",
        ]
    },
}