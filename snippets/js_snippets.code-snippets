{
    "Symbl.ai Get Access Token snippet": {
        "prefix": [
            "?get_token",
            "?access_token"
        ],
        "description": "This snippet should be used first(mandatorily), to get access_token for the rest of the API calls.",
        "body": [
            "// Installation of request package is necessary, npm install request",
            "",
            "// For more info, refer the docs: https://docs.symbl.ai/docs/developer-tools/authentication",
            "const request = require('request');",
            "const fs = require('fs');",
            "const appId = ${1:APP_ID};",
            "const appSecret = ${2:APP_SECRET};",
            "const authOptions = {",
            "  method: 'post',",
            "  url: \"https://api.symbl.ai/oauth2/token:generate\",",
            "  body: {",
            "    type: \"application\",",
            "    appId: appId,",
            "    appSecret: appSecret",
            "  },",
            "  json: true",
            "};",
            "request(authOptions, (err, res, body) => {",
            "  if (err) {",
            "    console.error('error posting json: ', err);",
            "    throw err",
            "  }",
            "  console.log(JSON.stringify(body, null, 2));",
            "});",
        ]
    },
    "Symbl.ai Job Status snippet": {
        "prefix": "?job_status",
        "description": "Check job_status for respective job_id",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/jobs-api",
            "",
            "const authToken = ${1:AUTH_TOKEN};",
            "const jobId = ${2:JOB_ID};         ",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/job/${jobId}`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "  console.log(body);",
            "});",
        ]
    },
    "Symbl.ai POST AUDIO API snippet": {
        "prefix": [
            "?audio_api",
            "?post_audio"
        ],
        "description": "The Async POST Audio API allows you to process an audio file, Use this API to upload your raw audio file and generate a Conversation ID",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-audio",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const webhookUrl = ${2:WEBHOOK_URL};",
            "const audioFileStream = fs.createReadStream('/file/location/audio.wav'); // location of audio file",
            "const params = {",
            "  'name': \"BusinessMeeting\",",
            "  // <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "  // 'webhookUrl': \"https://yourdomain.com/jobs/callback\",",
            "  // <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "  // 'customVocabulary': ['Platform', 'Discussion', 'Targets'],",
            "  // <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "  'confidenceThreshold': 0.6,",
            "  // <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "  // 'detectPhrases': True,",
            "  // <Optional, boolean| detect_phrases> |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.",
            "  // 'enableSeparateRecognitionPerChannel': True,",
            "  // <Optional, boolean| enable_separate_recognition_per_channel> |Enables Speaker Separated Channel audio processing. Accepts true or false.",
            "  // 'languageCode': \"en-US\"  // <Optional, boolean| language_code> |code of language of recording.",
            "}",
            "const audioOption = {",
            "  url: 'https://api.symbl.ai/v1/process/audio',",
            "  headers: {",
            "    'Authorization': `Bearer ${authToken}`,",
            "    'Content-Type': 'audio/wav'",
            "  },",
            "  qs: params,",
            "  json: true,",
            "};",
            "const responses = {",
            "  400: 'Bad Request! Please refer docs for correct input fields.',",
            "  401: 'Unauthorized. Please generate a new access token.',",
            "  404: 'The conversation and/or its metadata you asked could not be found, please check the input provided',",
            "  429: 'Maximum number of concurrent jobs reached. Please wait for some requests to complete.',",
            "  500: 'Something went wrong! Please contact support@symbl.ai'",
            "}",
            "audioFileStream.pipe(request.post(audioOption, (err, response, body) => {",
            "  const statusCode = response.statusCode;",
            "  if (err || Object.keys(responses).indexOf(statusCode.toString()) !== -1) {",
            "    throw new Error(responses[statusCode]);",
            "  }",
            "  console.log('Status code: ', statusCode);",
            "  console.log('Body', response.body);",
            "}));"
        ]
    },
    "Symbl.ai POST AUDIO URL API snippet": {
        "prefix": [
            "?audio_url_api",
            "?post_audio_url"
        ],
        "description": "The Async Audio URL API accepts a URL to an audio file of which you want to process, It can be utilized for any use case where you have access to recorded audio stored publicly as URL and want to extract insights and other conversational attributes supported by Symbl's Conversation API.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-audio-url",
            "",
            "const request = require('request');",
            "const authToken = ${",
            "    1:AUTH_TOKEN",
            "};",
            "const audioOption = {",
            "  url: 'https: //api.symbl.ai/v1/process/audio/url',",
            "  headers: {",
            "    'Authorization': `Bearer ${authToken",
            "        }`,",
            "    'Content-Type': 'application/json'",
            "    },",
            "  body: JSON.stringify({",
            "        // A valid url string. The URL must be a publicly accessible url.",
            "        \"url\": \"https://symbltestdata.s3.us-east-2.amazonaws.com/sample_audio_file.wav\",",
            "        // <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "        \"name\": \"Business Meeting\",",
            "        // <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "        // \"webhookUrl\": \"https://yourdomain.com/jobs/callback\",",
            "        // <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "        // \"customVocabulary\": [\"Platform\", \"Discussion\", \"Targets\"],",
            "        // <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "        \"confidenceThreshold\": 0.6,",
            "        // <Optional, boolean| detect_phrases> |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.",
            "        // \"detectPhrases\": true,",
            "        // <Optional, boolean| enable_separate_recognition_per_channel> |Enables Speaker Separated Channel audio processing. Accepts true or false.",
            "        // \"enableSeparateRecognitionPerChannel\": true,",
            "        // <Optional, boolean| channel_metadata> |This object parameter contains two variables speaker and channel to specific which speaker corresponds to which channel. This object only works when enableSeparateRecognitionPerChannel query param is set to true.",
            "        // \"languageCode\": \"en-US\"",
            "    })",
            "};",
            "const responses = {",
            "    400: 'Bad Request! Please refer docs for correct input fields.',",
            "    401: 'Unauthorized. Please generate a new access token.',",
            "    404: 'The conversation and/or its metadata you asked could not be found, please check the input provided',",
            "    429: 'Maximum number of concurrent jobs reached. Please wait for some requests to complete.',",
            "    500: 'Something went wrong! Please contact support@symbl.ai'",
            "}",
            "request.post(audioOption, (error, response, body) => {",
            "  const statusCode = response.statusCode;",
            "  if (err || Object.keys(responses).indexOf(statusCode.toString()) !== -1) {",
            "    throw new Error(responses[statusCode",
            "        ]);",
            "    }",
            "  console.log('Status code: ', statusCode);",
            "  console.log('Body', response.body);",
            "});",
        ]
    },
    "Symbl.ai POST VIDEO URL API snippet": {
        "prefix": [
            "?video_url_api",
            "?post_video_url"
        ],
        "description": "The Async Video URL API allows you to process a mp4 video and return the full text transcript along with conversational insights.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/async-api/overview/audio/post-video-url",
            "",
            "const request = require('request');",
            "const authToken = AUTH_TOKEN;",
            "const webhookUrl = WEBHOOK_URL;",
            "const payload = {",
            "  'url': \"https://symbltestdata.s3.us-east-2.amazonaws.com/sample_video_file.mp4\",",
            "  // A valid url string. The URL must be a publicly accessible url.",
            "  'name': \"BusinessMeeting\",",
            "  // <Optional, string| your_conversation_name | Your meeting name. Default name set to conversationId.>",
            "  'confidenceThreshold': 0.6,",
            "  // <Optional, double| confidence_threshold | Minimum required confidence for the insight to be recognized.>",
            "  // 'webhookUrl': \"https://yourdomain.com/jobs/callback\",",
            "  // <Optional, string| your_webhook_url| Webhook url on which job updates to be sent. (This should be post API)>",
            "  // 'customVocabulary': ['Platform', 'Discussion', 'Targets'],",
            "  // <Optional, list| custom_vocabulary_list> |Contains a list of words and phrases that provide hints to the speech recognition task.",
            "  // 'detectPhrases': true,",
            "  // <Optional, boolean| detect_phrases |Accepted values are true & false. It shows Actionable Phrases in each sentence of conversation. These sentences can be found in the Conversation's Messages API.>",
            "  // 'languageCode': \"en-US\"",
            "  // <Optional, boolean| language_code> |code of language of recording.>",
            "}",
            "const videoOption = {",
            "  url: 'https://api.symbl.ai/v1/process/video/url',",
            "  headers: {",
            "    'Authorization': `Bearer ${authToken}`,",
            "    'Content-Type': 'application/json'",
            "  },",
            "  // qs: {",
            "  //   webhookUrl: webhookUrl,",
            "  //   customEntities: [{",
            "  //     \"customType\": \"Custom_Entity_Type\",",
            "  //     \"text\": \"Custom Entity to be searched in transcript\"",
            "  //   }]",
            "  // },",
            "  body: JSON.stringify(payload)",
            "};",
            "const responses = {",
            "  400: 'Bad Request! Please refer docs for correct input fields.',",
            "  401: 'Unauthorized. Please generate a new access token.',",
            "  404: 'The conversation and/or its metadata you asked could not be found, please check the input provided',",
            "  429: 'Maximum number of concurrent jobs reached. Please wait for some requests to complete.',",
            "  500: 'Something went wrong! Please contact support@symbl.ai'",
            "}",
            "request.post(videoOption, (err, response, body) => {",
            "  const statusCode = response.statusCode;",
            "  if (err || Object.keys(responses).indexOf(statusCode.toString()) !== -1) {",
            "    throw new Error(responses[statusCode]);",
            "  }",
            "  console.log('Status code: ', statusCode);",
            "  console.log('Body', response.body);",
            "});",
        ]
    },
    "Symbl.ai Conversation Information snippet": {
        "prefix": "?conversation",
        "description": "This API returns the conversation meta-data like meeting name, member name and email, start and end time of the meeting, meeting type and meeting id.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/conversation-data",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai DELETE Conversation snippet": {
        "prefix": "?delete-conversation",
        "description": "This API permanently deletes conversation and all related entities such as messages, insights, topics etc. associated with the Conversation ID.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/delete-conversation",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.delete({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Transcription API snippet": {
        "prefix": [
            "?transcription",
            "?messages"
        ],
        "description": "The Messages API returns a list of all the messages in a conversation. You can use this for providing Speech to Text data (also known as transcription sometimes) for video conference, meeting or telephone call.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/messages",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/messages`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Topics API snippet": {
        "prefix": "?topics",
        "description": "The most relevant topics of discussion from the conversation that are generated based on the combination of the overall scope of the discussion. This API returns all the topics generated from a conversation.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/get-topics",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/topics`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Questions API snippet": {
        "prefix": "?questions",
        "description": "This API help you find explicit question or request for information that comes up during the conversation, whether answered or not, is recognized as a question.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/questions",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/questions`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Follow-Ups API snippet": {
        "prefix": "?follow-ups",
        "description": "This API returns list of all the follow-ups generated from the conversation. This is a category of Action Items with a connotation to follow-up a request or a task like sending an email or making a phone call or booking an appointment or setting up a meeting.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/follow-ups",
            "",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/follow-ups`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Action Items API snippet": {
        "prefix": "?action-items",
        "description": "This API returns a list of all the action items generated from the conversation.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/action-items",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/action-items`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Entities API snippet": {
        "prefix": "?entities",
        "description": "This API provides you with a functionality to extract entities(custom, location, person, date, number, organization,datetime,daterange, etc ) from the conversation.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/entities",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/entities`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Analytics API snippet": {
        "prefix": "?analytics",
        "description": "Analytics API provides you with functionality like finding speaker ratio, talk time, silence, pace and overlap in a conversation.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/analytics",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/analytics`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Members API snippet": {
        "prefix": [
            "?members",
            "?speakers"
        ],
        "description": "This API returns a list of all the members in a conversation. A Member is referred to a participant in the conversation that is uniquely identified as a speaker. Identifying different participants in the meetings can be done by implementing speaker separation.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/members",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/members`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai GET Summary API snippet": {
        "prefix": "?summary",
        "description": "This API allows you to get a Summary of important contextual messages in a conversation.This API works best on audio/video conversations that are at least 10 mins in duration. For text conversations, there must be more than 60 lines of conversation for the Summary to get generated.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/summary",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "request.get({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/summary`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai PUT Members API snippet": {
        "prefix": [
            "?edit-members",
            "?modify-speakers"
        ],
        "description": "Update an existing member in an conversation. This API can be used for updating the unique speakers detected as members from diarization as well.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/conversation-api/update-members",
            "",
            "const request = require('request');",
            "const authToken = ${1:AUTH_TOKEN};",
            "const conversationId = ${2:CONVERSATION_ID};",
            "const memberId = ${3:MEMBER_ID};",
            "request.put({",
            "    url: `https://api.symbl.ai/v1/conversations/${conversationId}/members/${memberId}`,",
            "    headers: { 'Authorization': `Bearer ${authToken}` },",
            "    body: {",
            "        id: memberId,",
            "        name: 'John',",
            "        email: 'john@example.com'",
            "    },",
            "    json: true",
            "}, (err, response, body) => {",
            "    console.log(body);",
            "});",
        ]
    },
    "Symbl.ai Streaming API Tutorial snippet": {
        "prefix": [
            "?streaming-api",
            "?live-speech-to-text-on-browser"
        ],
        "description": "Streaming API is an API for enabling real-time conversational analysis on voice, video, or chat, or any live streaming directly through your web browser. If you have voice, video, or chat enabled, Symbl's API for streaming enables you to tap the raw conversational data of those streams.",
        "body": [
            "// For more info, refer the docs: https://docs.symbl.ai/docs/streamingapi/tutorials/receive-ai-insights-from-your-web-browser",
            "",
            "            /**",
            " * The JWT token you get after authenticating with our API.",
            " * Check the Authentication section of the documentation for more details.",
            " */",
            "const accessToken = \"${1:access_token}\"",
            "const uniqueMeetingId = btoa(\"user@example.com\")",
            "const symblEndpoint = `wss://api.symbl.ai/v1/realtime/insights/${uniqueMeetingId}?access_token=${accessToken}`;",

            "const ws = new WebSocket(symblEndpoint);",

            "// Fired when a message is received from the WebSocket server",
            "ws.onmessage = (event) => {",
            "  // You can find the conversationId in event.message.data.conversationId;",
            "  const data = JSON.parse(event.data);",
            "  if (data.type === 'message' && data.message.hasOwnProperty('data')) {",
            "    console.log('conversationId', data.message.data.conversationId);",
            "  }",
            "  if (data.type === 'message_response') {",
            "    for (let message of data.messages) {",
            "      console.log('Transcript (more accurate): ', message.payload.content);",
            "    }",
            "  }",
            "  if (data.type === 'topic_response') {",
            "    for (let topic of data.topics) {",
            "      console.log('Topic detected: ', topic.phrases)",
            "    }",
            "  }",
            "  if (data.type === 'insight_response') {",
            "    for (let insight of data.insights) {",
            "      console.log('Insight detected: ', insight.payload.content);",
            "    }",
            "  }",
            "  if (data.type === 'message' && data.message.hasOwnProperty('punctuated')) {",
            "    console.log('Live transcript (less accurate): ', data.message.punctuated.transcript)",
            "  }",
            "  console.log(`Response type: ${data.type}. Object: `, data);",
            "};",

            "// Fired when the WebSocket closes unexpectedly due to an error or lost connetion",
            "ws.onerror  = (err) => {",
            "  console.error(err);",
            "};",

            "// Fired when the WebSocket connection has been closed",
            "ws.onclose = (event) => {",
            "  console.info('Connection to websocket closed');",
            "};",

            "// Fired when the connection succeeds.",
            "ws.onopen = (event) => {",
            "  ws.send(JSON.stringify({",
            "    type: 'start_request',",
            "    meetingTitle: 'Websockets How-to', // Conversation name",
            "    insightTypes: ['question', 'action_item'], // Will enable insight generation",
            "    config: {",
            "      confidenceThreshold: 0.5,",
            "      languageCode: 'en-US',",
            "      speechRecognition: {",
            "        encoding: 'LINEAR16',",
            "        sampleRateHertz: 44100,",
            "      }",
            "    },",
            "    speaker: {",
            "      userId: 'example@symbl.ai',",
            "      name: 'Example Sample',",
            "    }",
            "  }));",
            "};",

            "const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });",

            "/**",
            " * The callback function which fires after a user gives the browser permission to use",
            " * the computer's microphone. Starts a recording session which sends the audio stream to",
            " * the WebSocket endpoint for processing.",
            " */",
            "const handleSuccess = (stream) => {",
            "  const AudioContext = window.AudioContext;",
            "  const context = new AudioContext();",
            "  const source = context.createMediaStreamSource(stream);",
            "  const processor = context.createScriptProcessor(1024, 1, 1);",
            "  const gainNode = context.createGain();",
            "  source.connect(gainNode);",
            "  gainNode.connect(processor);",
            "  processor.connect(context.destination);",
            "  processor.onaudioprocess = (e) => {",
            "    // convert to 16-bit payload",
            "    const inputData = e.inputBuffer.getChannelData(0) || new Float32Array(this.bufferSize);",
            "    const targetBuffer = new Int16Array(inputData.length);",
            "    for (let index = inputData.length; index > 0; index--) {",
            "        targetBuffer[index] = 32767 * Math.min(1, inputData[index]);",
            "    }",
            "    // Send audio stream to websocket.",
            "    if (ws.readyState === WebSocket.OPEN) {",
            "      ws.send(targetBuffer.buffer);",
            "    }",
            "  };",
            "};",

            "handleSuccess(stream);",
        ]
    },



    
}